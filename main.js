(()=>{"use strict";var e,t,n,r,o,s,i,c={487:(e,t,n)=>{n(177);const r=new class{constructor(e){this.baseUrl=e}async api(e,t){const n=await fetch(this.baseUrl+e,t);if(!n.ok)throw new Error(`Api Error: ${n.statusText}`);const r=await n.json();return console.log(r),r}async post(e,t){return this.api(e,{method:"post",body:JSON.stringify(t),headers:{Accept:"application/json","Content-Type":"application/json; charset=utf-8"}})}}("https://ahj-ws-chat-back.onrender.com"),o=document.getElementsByTagName("body")[0];new class{constructor(e){"string"==typeof e&&(e=document.querySelector(e)),this.element=e,this.add=this.add.bind(this),this.subScribe=this.subScribe.bind(this),this.wss=this.wss.bind(this),this.wssMessage=this.wssMessage.bind(this),this.addWssChat=this.addWssChat.bind(this),this.ws=new WebSocket("wss://ahj-ws-chat-back.onrender.com/ws")}add(){const e=document.createElement("div");e.className="window",this.element.append(e),this.subScribe(e),r.api("/ping"),this.closeSocket()}subScribe(e){const t=document.createElement("form");t.className="subscribe input",t.innerHTML='<form> \n    Выберите псевдоним <input class="input subscribe__name" type="text" name="name" >\n    <button class="btn subscribe__send submit">Продолжить</button>\n    </form>',e.append(t);const n=()=>{const e=this.element.querySelector(".subscribe__name"),t=(this.element.querySelector(".chat__content"),[e.value,"user"]);e.value="",this.ws.addEventListener("message",this.wss),this.ws.send(t)};t.addEventListener("submit",(e=>{e.preventDefault(),n()}))}wss(e){const{data:t}=e,n=JSON.parse(t);if(console.log("От сервера получено "),console.log(n),"string"==typeof n){const e=document.createElement("span");e.className="span",e.textContent=n,this.element.querySelector(".subscribe").insertBefore(e,this.element.querySelector(".btn")),setInterval((()=>{e.remove()}),2e3)}else if("user"===n.type&&n.message){if(null===this.element.querySelector(".input22")){this.addChat(n.id);const e=document.createElement("div");e.className="subscribe input22",this.element.querySelector(".window").append(e),this.element.querySelector(".input").remove()}if(null===this.element.querySelector(".active")){const e=document.createElement("div");e.className="names active",this.element.querySelector(".input22").append(e),e.textContent=`${n.message}`}}if(n.chat)for(let e=0;e<n.chat.length;e++)if(null!==this.element.querySelector(".names")){const t=Array.from(this.element.querySelectorAll(".names"));if(-1===t.findIndex((t=>n.chat[e].name===t.textContent))){const r=document.createElement("div");r.className="names",this.element.querySelector(".input22").append(r),r.textContent=n.chat[e].name,console.log(n.chat[e].name,t[e].textContent,123456789)}}null===this.element.querySelector(".chat2")&&this.element.querySelector(".active").textContent!==n.name&&"chat"===n.type&&this.wssMessage(e)}wssMessage(e){const{data:t}=e;console.log("wss");const n=JSON.parse(t);if("chat"===n.type&&n.message){const e=document.createElement("div");e.className="chat2",this.element.querySelector(".chat").insertBefore(e,this.element.querySelector(".form")),Array.from(this.element.querySelectorAll(".chat2")).forEach((e=>{""===e.textContent&&(e.textContent=`${n.message}`,console.log("Пришли данные"))}))}if(n.chat)for(let e=0;e<n.chat.length;e++){const t=this.element.querySelector(".active");null!==t&&n.chat[e].name===t.textContent&&n.chat[e].chat.forEach((e=>{Array.from(this.element.querySelectorAll(".chat2")).forEach((t=>{t.textContent===e&&(t.classList.add("chatActiveforMe"),console.log(e))}))}))}}addChat(e){const t=document.createElement("div");t.className="chat",t.innerHTML='\n    <form class =\'form\'>\n    <input class="input subscribe__name1" type="text" name="name" value ="Напиши что-нибудь...">\n    <button class =\'buttonSend\' >+</button>  \n    </form>',this.element.querySelector(".window").append(t),this.addWssChat(t,e)}addWssChat(e,t){e.querySelector(".subscribe__name1").addEventListener("click",(()=>{e.querySelector(".subscribe__name1").value=""}));const n=()=>{this.ws.addEventListener("message",this.wssMessage);const n=[e.querySelector(".subscribe__name1").value,"chat",t];this.ws.send(n),e.querySelector(".subscribe__name1").value="..."};e.addEventListener("submit",(e=>{e.preventDefault(),n()}))}closeSocket(){this.element.querySelector(".window").addEventListener("click",(()=>{this.ws.addEventListener("close",(()=>console.log("close123"))),console.log("close")}))}}(o).add()},783:(e,t,n)=>{var r=n(618),o=Object.create(null),s="undefined"==typeof document,i=Array.prototype.forEach;function c(){}function a(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(d(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded=!0,e.parentNode.removeChild(e)})),n.addEventListener("error",(function(){n.isLoaded=!0,e.parentNode.removeChild(e)})),n.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function l(){var e=document.querySelectorAll("link");i.call(e,(function(e){!0!==e.visited&&a(e)}))}function d(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(s)return console.log("no window.document found, will not HMR CSS"),c;var n,u,f=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var n=document.getElementsByTagName("script"),s=n[n.length-1];s&&(t=s.src)}o[e]=t}return function(e){if(!t)return null;var n=t.split(/([^\\/]+)\.js$/),o=n&&n[1];return o&&e?e.split(",").map((function(e){var n=new RegExp("".concat(o,"\\.js$"),"g");return r(t.replace(n,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return n=function(){var e=f(t.filename),n=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),n=!1;return i.call(t,(function(t){if(t.href){var o=function(e,t){var n;return e=r(e,{stripWWW:!1}),t.some((function(r){e.indexOf(t)>-1&&(n=r)})),n}(t.href,e);d(o)&&!0!==t.visited&&o&&(a(t,o),n=!0)}})),n}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void l();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),l())},50,u=0,function(){var e=this,t=arguments,r=function(){return n.apply(e,t)};clearTimeout(u),u=setTimeout(r,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(t,"i"),"").split("/"),r=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",t+r+n.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,n)=>{var r=n(783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)}},a={};function l(e){if(a[e])return a[e].exports;var t=a[e]={id:e,exports:{}},n={id:e,module:t,factory:c[e],require:l};return l.i.forEach((function(e){e(n)})),t=n.module,n.factory.call(t.exports,t,t.exports,n.require),t.exports}l.m=c,l.c=a,l.i=[],l.hu=e=>e+"."+l.h()+".hot-update.js",l.miniCssF=e=>"main.css",l.hmrF=()=>"main."+l.h()+".hot-update.json",l.h=()=>"0c2715f540725fa908d3",l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",l.l=(n,r,o)=>{if(e[n])e[n].push(r);else{var s,i;if(void 0!==o)for(var c=document.getElementsByTagName("script"),a=0;a<c.length;a++){var d=c[a];if(d.getAttribute("src")==n||d.getAttribute("data-webpack")==t+o){s=d;break}}s||(i=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,l.nc&&s.setAttribute("nonce",l.nc),s.setAttribute("data-webpack",t+o),s.src=n),e[n]=[r];var u=(t,r)=>{s.onerror=s.onload=null,clearTimeout(f);var o=e[n];if(delete e[n],s.parentNode&&s.parentNode.removeChild(s),o&&o.forEach((e=>e(r))),t)return t(r)},f=setTimeout(u.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=u.bind(null,s.onerror),s.onload=u.bind(null,s.onload),i&&document.head.appendChild(s)}},(()=>{var e,t,n,r,o={},s=l.c,i=[],c=[],a="idle";function d(e){a=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}function u(e){if(0===t.length)return e();var n=t;return t=[],Promise.all(n).then((function(){return u(e)}))}function f(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return d("check"),l.hmrM().then((function(r){if(!r)return d(m()?"ready":"idle"),null;d("prepare");var o=[];return t=[],n=[],Promise.all(Object.keys(l.hmrC).reduce((function(e,t){return l.hmrC[t](r.c,r.r,r.m,e,n,o),e}),[])).then((function(){return u((function(){return e?h(e):(d("ready"),o)}))}))}))}function p(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},m();var t=n.map((function(t){return t(e)}));n=void 0;var o,s=t.map((function(e){return e.error})).filter(Boolean);if(s.length>0)return d("abort"),Promise.resolve().then((function(){throw s[0]}));d("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),d("apply");var i=function(e){o||(o=e)},c=[];return t.forEach((function(e){if(e.apply){var t=e.apply(i);if(t)for(var n=0;n<t.length;n++)c.push(t[n])}})),o?(d("fail"),Promise.resolve().then((function(){throw o}))):r?h(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(d("idle"),Promise.resolve(c))}function m(){if(r)return n||(n=[]),Object.keys(l.hmrI).forEach((function(e){r.forEach((function(t){l.hmrI[e](t,n)}))})),r=void 0,!0}l.hmrD=o,l.i.push((function(h){var m,v,y,b=h.module,g=function(n,r){var o=s[r];if(!o)return n;var c=function(t){if(o.hot.active){if(s[t]){var c=s[t].parents;-1===c.indexOf(r)&&c.push(r)}else i=[r],e=t;-1===o.children.indexOf(t)&&o.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+r),i=[];return n(t)},l=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t}}};for(var f in n)Object.prototype.hasOwnProperty.call(n,f)&&"e"!==f&&Object.defineProperty(c,f,l(f));return c.e=function(e){return function(e){switch(a){case"ready":return d("prepare"),t.push(e),u((function(){d("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(n.e(e))},c}(h.require,h.id);b.hot=(m=h.id,v=b,y={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==m,_requireSelf:function(){i=v.parents.slice(),e=m,l(m)},active:!0,accept:function(e,t){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){};else y._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":n=[],Object.keys(l.hmrI).forEach((function(e){l.hmrI[e](m,n)})),d("ready");break;case"ready":Object.keys(l.hmrI).forEach((function(e){l.hmrI[e](m,n)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:f,apply:p,status:function(e){if(!e)return a;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:o[m]},e=void 0,y),b.parents=i,b.children=[],i=[],h.require=g})),l.hmrC={},l.hmrI={}})(),l.p="",n=(e,t,n,r)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=s=>{if(o.onerror=o.onload=null,"load"===s.type)n();else{var i=s&&("load"===s.type?"missing":s.type),c=s&&s.target&&s.target.href||t,a=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");a.code="CSS_CHUNK_LOAD_FAILED",a.type=i,a.request=c,o.parentNode.removeChild(o),r(a)}},o.href=t,document.head.appendChild(o),o},r=(e,t)=>{for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var o=(i=n[r]).getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(o===e||o===t))return i}var s=document.getElementsByTagName("style");for(r=0;r<s.length;r++){var i;if((o=(i=s[r]).getAttribute("data-href"))===e||o===t)return i}},o=[],s=[],i=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<s.length;e++)s[e].rel="stylesheet";s.length=0}}),l.hmrC.miniCss=(e,t,c,a,d,u)=>{d.push(i),e.forEach((e=>{var t=l.miniCssF(e),i=l.p+t;const c=r(t,i);c&&a.push(new Promise(((t,r)=>{var a=n(e,i,(()=>{a.as="style",a.rel="preload",t()}),r);o.push(c),s.push(a)})))}))},(()=>{var e,t,n,r,o={179:0},s={};function i(e){return new Promise(((t,n)=>{s[e]=t;var r=l.p+l.hu(e),o=new Error;l.l(r,(t=>{if(s[e]){s[e]=void 0;var r=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+r+": "+i+")",o.name="ChunkLoadError",o.type=r,o.request=i,n(o)}}))}))}function c(s){function i(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),s=o.id,i=o.chain,a=l.c[s];if(a&&(!a.hot._selfAccepted||a.hot._selfInvalidated)){if(a.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(a.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var d=0;d<a.parents.length;d++){var u=a.parents[d],f=l.c[u];if(f){if(f.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([u]),moduleId:s,parentId:u};-1===t.indexOf(u)&&(f.hot._acceptedDependencies[s]?(n[u]||(n[u]=[]),c(n[u],[s])):(delete n[u],t.push(u),r.push({chain:i.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}l.f&&delete l.f.jsonpHmr,e=void 0;var a={},d=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(l.o(t,p)){var h,m=t[p],v=!1,y=!1,b=!1,g="";switch((h=m?i(p):{type:"disposed",moduleId:p}).chain&&(g="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":s.onDeclined&&s.onDeclined(h),s.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+g));break;case"declined":s.onDeclined&&s.onDeclined(h),s.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+g));break;case"unaccepted":s.onUnaccepted&&s.onUnaccepted(h),s.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+g));break;case"accepted":s.onAccepted&&s.onAccepted(h),y=!0;break;case"disposed":s.onDisposed&&s.onDisposed(h),b=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(p in u[p]=m,c(d,h.outdatedModules),h.outdatedDependencies)l.o(h.outdatedDependencies,p)&&(a[p]||(a[p]=[]),c(a[p],h.outdatedDependencies[p]));b&&(c(d,[h.moduleId]),u[p]=f)}t=void 0;for(var w,E=[],S=0;S<d.length;S++){var _=d[S];l.c[_]&&l.c[_].hot._selfAccepted&&u[_]!==f&&!l.c[_].hot._selfInvalidated&&E.push({module:_,require:l.c[_].hot._requireSelf,errorHandler:l.c[_].hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete o[e]})),n=void 0;for(var t,r=d.slice();r.length>0;){var s=r.pop(),i=l.c[s];if(i){var c={},u=i.hot._disposeHandlers;for(S=0;S<u.length;S++)u[S].call(null,c);for(l.hmrD[s]=c,i.hot.active=!1,delete l.c[s],delete a[s],S=0;S<i.children.length;S++){var f=l.c[i.children[S]];f&&(e=f.parents.indexOf(s))>=0&&f.parents.splice(e,1)}}}for(var p in a)if(l.o(a,p)&&(i=l.c[p]))for(w=a[p],S=0;S<w.length;S++)t=w[S],(e=i.children.indexOf(t))>=0&&i.children.splice(e,1)},apply:function(e){for(var t in u)l.o(u,t)&&(l.m[t]=u[t]);for(var n=0;n<r.length;n++)r[n](l);for(var o in a)if(l.o(a,o)){var i=l.c[o];if(i){w=a[o];for(var c=[],f=[],p=0;p<w.length;p++){var h=w[p],m=i.hot._acceptedDependencies[h];if(m){if(-1!==c.indexOf(m))continue;c.push(m),f.push(h)}}for(var v=0;v<c.length;v++)try{c[v].call(null,w)}catch(t){s.onErrored&&s.onErrored({type:"accept-errored",moduleId:o,dependencyId:f[v],error:t}),s.ignoreErrored||e(t)}}}for(var y=0;y<E.length;y++){var b=E[y],g=b.module;try{b.require(g)}catch(t){if("function"==typeof b.errorHandler)try{b.errorHandler(t)}catch(n){s.onErrored&&s.onErrored({type:"self-accept-error-handler-errored",moduleId:g,error:n,originalError:t}),s.ignoreErrored||e(n),e(t)}else s.onErrored&&s.onErrored({type:"self-accept-errored",moduleId:g,error:t}),s.ignoreErrored||e(t)}}return d}}}self.webpackHotUpdateajs=(e,n,o)=>{for(var i in n)l.o(n,i)&&(t[i]=n[i]);o&&r.push(o),s[e]&&(s[e](),s[e]=void 0)},l.hmrI.jsonp=function(e,o){t||(t={},r=[],n=[],o.push(c)),l.o(t,e)||(t[e]=l.m[e])},l.hmrC.jsonp=function(s,a,d,u,f,p){f.push(c),e={},n=a,t=d.reduce((function(e,t){return e[t]=!1,e}),{}),r=[],s.forEach((function(t){l.o(o,t)&&void 0!==o[t]&&(u.push(i(t)),e[t]=!0)})),l.f&&(l.f.jsonpHmr=function(t,n){e&&!l.o(e,t)&&l.o(o,t)&&void 0!==o[t]&&(n.push(i(t)),e[t]=!0)})},l.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(l.p+l.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),l(487)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,